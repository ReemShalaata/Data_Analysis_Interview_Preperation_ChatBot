import streamlit as st
import streamlit.components.v1 as components
import pandas as pd 
import random
custom_css = """
    <style>
        /* Targeting the div elements generated by st.write */
    div.stMarkdown > div {
        font-size: 18px;  /* Custom font size */
        font-family: 'Arial', sans-serif;  /* Custom font family */
        color: blue;  /* Custom font color */
        /* More styles can be added here */
    }
    /* Targeting all textarea elements */
        .element-container:has(>.stTextArea), .stTextArea {
            width: 800px !important;
        }
        .stTextArea textarea {
            height: 400px;
        }
        /* Styling for the first button */
        div.stButton > button:first-child {
            width: 150px;
            height: 50px;
            border-radius: 10px; /* Rounded corners */
            border: 2px solid green; /* Border color and width */
            background-color: lightblue; /* Background color */
            box-shadow: 3px 3px 5px grey; /* Shadow effect */
        }

        /* Hover effect for the first button */
        div.stButton > button:first-child:hover {
            background-color: lightgreen; /* Color changes on hover */
        }

        /* Styling for the second button */
        div.stButton > button:nth-child(2) {
            width: 200px;
            height: 60px;
            border-radius: 15px;
            border: 2px solid purple;
            background-color: lightcoral;
            box-shadow: 3px 3px 5px grey;
        }

        /* Hover effect for the second button */
        div.stButton > button:nth-child(2):hover {
            background-color: lightsalmon;
        }
    </style>
"""
dataset = pd.read_excel('training_dataset.xlsx') 
num_samples=5
st.session_state.samples_indices = random.sample(range(dataset.shape[0]), num_samples)

# Function to format text with HTML, including size, color, font family, font weight, and optional emojis
def format_text(text, size, color, alignment, font_family="Arial", font_weight="normal", emoji=None):
    emoji_html = f"{emoji} " if emoji else ""
    # Wrap the text inside a div element for applying text alignment
    return f'<div style="text-align: {alignment};"><span style="color: {color}; font-size: {size}px; font-family: {font_family}; font-weight: {font_weight};">{text} {emoji_html}</span></div>'

def user_answer_input(question_num):
    user_answer= st.text_area(key=f"user_answer{question_num}")
    return user_answer

# Callback functions
def increment_question_number():
    st.session_state.question_number += 1

def decrement_question_number():
    if st.session_state.question_number > 0:
        st.session_state.question_number -= 1
import streamlit as st

# Custom CSS to set the full-page, two-tone background
def set_background(color):
    # Using the provided color
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-color: {color};
        }}
        </style>
        """,
        unsafe_allow_html=True
    )
st.markdown(custom_css, unsafe_allow_html=True)

# Content of the home page
def home_page():
    st.markdown(format_text(text="Wlecome ",
                            alignment='center',size=40,color="Blue",font_family="Arial", font_weight="Bold", emoji="ðŸ˜€<br><br>"),unsafe_allow_html=True)
    
    st.markdown(format_text(text="practice technical ad behavioural interview questions ",

                            alignment='center',size=20,color="gray",font_family="Arial", font_weight="Bold", emoji="<br><br>"),unsafe_allow_html=True)
    
# Content of the difficulty page
def choose_difficulty_page():
    st.title("Choose the Difficulty Level")
    difficulty = st.radio("Select Difficulty", ["Easy", "Medium", "Hard"])
    st.session_state.difficulty = difficulty

# Content of the question pages
def question_page(question_num):
    st.title(f"Question {question_num}:")
    st.write(f"{dataset.iloc[st.session_state.samples_indices[question_num-1]]['Question']}")
    user_answer=user_answer_input(question_num)
    return user_answer

# Content of the final page
def final_page():
    st.title("End of the Guide")
    st.write("You have completed the guide!")




# Initialize session state for question number
if 'question_number' not in st.session_state:
    st.session_state.question_number = -1
    
# Page rendering logic
if st.session_state.question_number == -1:
    set_background("#f5f5f5")  # Replace with your desired colors
    home_page()
elif st.session_state.question_number == 0:
    choose_difficulty_page()
elif 1 <= st.session_state.question_number <= 5:
    question_page(st.session_state.question_number)
else:
    final_page()


def ChangeWidgetFontStyle(wgt_txt, font_size='12px', font_family='Arial', font_weight='normal', font_color='black', text_align='center'):
    htmlstr = """<script>var elements = window.parent.document.querySelectorAll('*'), i;
                    for (i = 0; i < elements.length; ++i) { 
                        if (elements[i].innerText === '""" + wgt_txt + """') {
                            elements[i].style.fontSize = '""" + font_size + """';
                            elements[i].style.fontFamily = '""" + font_family + """';
                            elements[i].style.fontWeight = '""" + font_weight + """';
                            elements[i].style.color = '""" + font_color + """';
                            elements[i].style.textAlign = '""" + text_align + """';

                        }
                    } </script>"""

    components.html(htmlstr, height=0, width=0)


# def ChangeButtonColour(widget_label, font_color, background_color):
#     htmlstr = f"""
#         <script>
#             var elements = window.parent.document.querySelectorAll('button');
#             for (var i = 0; i < elements.length; ++i) {{ 
#                 if (elements[i].innerText == '{widget_label}') {{ 
#                     elements[i].style.color ='{font_color}';
#                     elements[i].style.background = '{background_color}'
#                 }}
#             }}
#         </script>
#         """
#     components.html(f"{htmlstr}", height=0, width=0)

# ChangeWidgetFontStyle('Start','12px','Arial','bold','blue','green')


col1, col2, col3 = st.columns(3)
with col1:
    if 1 < st.session_state.question_number <= 5:
        st.button(label="Back", on_click=decrement_question_number, key="back")
with col2:
    if st.session_state.question_number == -1:
        st.button("Start", on_click=increment_question_number, key="start")
    elif st.session_state.question_number == 0:
        st.button("Confirm", on_click=increment_question_number, key="confirm")


with col3:
    if 1 <= st.session_state.question_number < 5:
        st.button("Next", on_click=increment_question_number, key="next")

    elif st.session_state.question_number == 5:        
        st.button("Submit", on_click=increment_question_number, key="submit",)

ChangeWidgetFontStyle('Start','24px','Arial','bold','green')

# # Function to format text with HTML, including size, color, font family, font weight, and optional emojis
# def format_text(text, size, color, alignment, font_family="Arial", font_weight="normal", emoji=None):
#     emoji_html = f"{emoji} " if emoji else ""
#     # Wrap the text inside a div element for applying text alignment
#     return f'<div style="text-align: {alignment};"><span style="color: {color}; font-size: {size}px; font-family: {font_family}; font-weight: {font_weight};">{text} {emoji_html}</span></div>'


# def user_answer_input(question_num):
#     user_answer= st.text_area("Your Answer :", key=f"user_answer{question_num}",height=200)
#     return user_answer

# # Callback functions
# def increment_question_number():
#     st.session_state.question_number += 1

# def decrement_question_number():
#     if st.session_state.question_number > 0:
#         st.session_state.question_number -= 1
# import streamlit as st

# # Custom CSS to set the full-page, two-tone background
# def set_background(color):
#     # Using the provided color
#     st.markdown(
#         f"""
#         <style>
#         .stApp {{
#             background-color: {color};
#         }}
#         </style>
#         """,
#         unsafe_allow_html=True
#     )


# # Content of the home page
# def home_page():
#     st.markdown(format_text(text="Wlecome ",
#                             alignment='center',size=40,color="Blue",font_family="Arial", font_weight="Bold", emoji="ðŸ˜€<br><br>"),unsafe_allow_html=True)
    
#     st.markdown(format_text(text="practice technical ad behavioural interview questions ",

#                             alignment='center',size=20,color="gray",font_family="Arial", font_weight="Bold", emoji="<br><br>"),unsafe_allow_html=True)
    
# # Content of the difficulty page
# def choose_difficulty_page():
#     st.title("Choose the Difficulty Level")
#     difficulty = st.radio("Select Difficulty", ["Easy", "Medium", "Hard"])
#     st.session_state.difficulty = difficulty

# # Content of the question pages
# def question_page(question_num):
#     st.title(f"Question {question_num}:")
#     st.write(f"{dataset.iloc[st.session_state.samples_indices[question_num-1]]['Question']}")
#     user_answer=user_answer_input(question_num)
#     return user_answer

# # Content of the final page
# def final_page():
#     st.title("End of the Guide")
#     st.write("You have completed the guide!")


# # Add custom HTML to the app for styling
# st.markdown(custom_html, unsafe_allow_html=True)

# # Initialize session state for question number
# if 'question_number' not in st.session_state:
#     st.session_state.question_number = -1
    
# # Page rendering logic
# if st.session_state.question_number == -1:
#     set_background("#f5f5f5")  # Replace with your desired colors
#     home_page()
# elif st.session_state.question_number == 0:
#     choose_difficulty_page()
# elif 1 <= st.session_state.question_number <= 5:
#     question_page(st.session_state.question_number)
# else:
#     final_page()


# # Footer buttons
# st.markdown('<div class="button-container">', unsafe_allow_html=True)
# col1, col2, col3 = st.columns(3)

# with col1:
#     if 1 < st.session_state.question_number <= 5:
#         st.button(label="Back", on_click=decrement_question_number, key="back")
# with col2:
#     if st.session_state.question_number == -1:
#         st.button("Start", on_click=increment_question_number, key="start")
#     elif st.session_state.question_number == 0:
#         st.button("Confirm", on_click=increment_question_number, key="confirm")


# with col3:
#     if 1 <= st.session_state.question_number < 5:
#         st.button("Next", on_click=increment_question_number, key="next")

#     elif st.session_state.question_number == 5:        
#         st.button("Submit", on_click=increment_question_number, key="submit",)




# st.markdown('</div>', unsafe_allow_html=True)
